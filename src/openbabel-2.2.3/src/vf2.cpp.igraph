#include <vf2/vf2.h>
#include <igraph/igraph.h>
#include <openbabel/obiter.h>


using namespace std;

namespace OpenBabel
{

//class OBAtomDestroyer: public AttrDestroyer
//  { public:
//       virtual void destroy(void *a)
//         { delete ((OBAtom*)a);
//         }
//  };
  
//class _OBAtomComparator: public AttrComparator
//{ 
//public:
//  _OBAtomComparator()
//    { 
//    }
//  virtual bool compatible(void* aa, void* ab)
//    {
//      OBAtom* _aa = (OBAtom*)aa;
//      OBAtom* _ab = (OBAtom*)ab;  
//        
//      if (_aa->IsInRing() && !_ab->IsInRing()) return false;
//      if (_aa->IsAromatic() != _ab->IsAromatic()) return false;  
//      if (_aa->GetAtomicNum() != _ab->GetAtomicNum()) return false;
//      //if (_aa->GetFormalCharge() != _ab->GetFormalCharge()) return false;
//      if (_aa->GetIsotope() != _ab->GetIsotope()) return false;
//      //if (_aa->GetHyb() != _ab->GetHyb()) return false;
//      //if (_aa->IsChiral() != _ab->IsChiral()) return false;
//      
//      return true;
//    }
//};
//  
////class OBBondDestroyer: public AttrDestroyer
////  { public:
////       virtual void destroy(void *b)
////         { delete ((OBBond*) b);
////         }
////  };
//  
//class _OBBondComparator: public AttrComparator
//{ 
//public:
//  _OBBondComparator()
//    {
//    }
//  virtual bool compatible(void* ba, void* bb)
//    {
//      OBBond* _ba = (OBBond*)ba;
//      OBBond* _bb = (OBBond*)bb;
//      
//      if (_ba->IsInRing() && !_bb->IsInRing()) return false;    
//      if (_ba->IsAromatic() == _bb->IsAromatic()) return true;  
//      if (_ba->GetBondOrder() != _bb->GetBondOrder()) return false;
//      if (_ba->IsUp() != _bb->IsUp()) return false;
//      if (_ba->IsDown() != _bb->IsDown()) return false;
//      if (_ba->IsHash() != _bb->IsHash()) return false;
//      if (_ba->IsWedge() != _bb->IsWedge()) return false;
//      
//      return true;
//    }
//};

    VF2::VF2() {};

    bool VF2::Match(OBMol mol,OBMol mol_sarg)
  {
  igraph_t g_target, g_sarg;
  igraph_bool_t iso_match;
  
  igraph_empty(&g_target, mol.NumAtoms(), false);
  igraph_empty(&g_sarg, mol_sarg.NumAtoms(), false);

      
      FOR_BONDS_OF_MOL(b, mol_sarg) {
          igraph_add_edge(&g_sarg, b->GetBeginAtomIdx()-1, b->GetEndAtomIdx()-1);

      }
      
      FOR_BONDS_OF_MOL(b, mol) {
         igraph_add_edge(&g_target, b->GetBeginAtomIdx()-1, b->GetEndAtomIdx()-1);
      }
      
      igraph_subisomorphic_vf2(&g_target, &g_sarg, &iso_match, NULL, NULL);
      
      igraph_destroy(&g_target);
      igraph_destroy(&g_sarg);

      return (iso_match) ? true : false; 
  }     
}  
  
